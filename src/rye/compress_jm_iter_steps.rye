; Translation of simple Compression puzzle to Ryelang

; Mitja's Golang iterative solution
; https://github.com/otobrglez/compression-puzzle/blob/master/src/go/compress_mitja.go
; 
;func compress(in string) (out string) {
;  if len(in) == 0 {
;    return ""
;  }
;  ch := rune(in[0])
;  count := 0
;  for _, cur := range in {
;    if cur == ch {
;      count++
;      continue
;    }
;    out = out + fmt.Sprint(count) + string(ch)
;    ch = cur
;    count = 1
;  }
;  out = out + fmt.Sprint(count) + string(ch)
;  return
;}

; Direct translation to Rye

compress-a: fn { in } {
	if in .length = 0 {
		return ""
	}
	chr: first in
	cnt: 0 , out: ""
	for in { :cur
		either cur = chr {
			cnt: cnt + 1
		} {
			out: out + cnt .str + chr
			chr: cur
			cnt: 1
		}
	}
	out: out + cnt .str + chr
}

"AAABBACCC" .compress-a .assert-equal "3A2B1A3C"

; Some cleaning up

compress-b: fn { in } {
	chr: first in |^fix "" ; "returning function" fix returns to caller in case arg is a failure
	cnt: 0 , out: ""
	for in {
		:cur = chr |either {  ; we can set cur inline 
			inc! 'cnt         ; rye has few functions that change data in-place. To warn you the end w/ !
		} {
			append! cnt .str + chr 'out  ; we use in-place append!
			chr: cur , cnt: 1
		}
	}
	append! cnt .str + chr 'out
}

"AAABBACCC" .compress-b .assert-equal "3A2B1A3C"

; Final version

compress: fn1 {
	|pass { .first |fix "" :chr , cnt: 0 , out: ""
		output: { cnt .concat chr |append! 'out } }
	|for { = chr |either { inc! 'cnt }
		{ do output , cnt: 1 } , :chr                    
	} do output
}

"AAABBACCC" .compress .assert-equal "3A2B1A3C"

